// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "09/21/2020 22:09:51"
                                                                                
// Verilog Test Bench template for design : exp4_block
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 10 ns/ 1 ps
module exp4_block_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg CLOCK2_50;
reg CLOCK3_50;
reg CLOCK4_50;
reg CLOCK_50;
reg [9:0] SW;
// wires                                               
wire [9:0]  LEDR;

// assign statements (if any)                          
exp4_block i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK2_50(CLOCK2_50),
	.CLOCK3_50(CLOCK3_50),
	.CLOCK4_50(CLOCK4_50),
	.CLOCK_50(CLOCK_50),
	.LEDR(LEDR),
	.SW(SW)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
CLOCK_50 = 0;SW[1] = 0;SW[0] = 0; #7;
				SW[1] = 0;#7;
				SW[1] = 1;#7;
				SW[1] = 0;#7;
SW[0] = 1; #7;
				SW[1] = 0;#7;
				SW[1] = 1;#7;
				SW[1] = 0;#7;
				SW[1] = 1;#7;
SW[0] = 0; #7;
				SW[1] = 0;#7;
				SW[1] = 1;#7;
				SW[1] = 0;#7;
				SW[1] = 1;#7;
				
$stop;
// --> end                                             
$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
#5 CLOCK_50 = ~CLOCK_50;                                                      
//@eachvec;                                              
// --> end                                             
end                                                    
endmodule

